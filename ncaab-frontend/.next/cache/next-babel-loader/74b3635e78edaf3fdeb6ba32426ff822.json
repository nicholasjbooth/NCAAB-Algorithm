{"ast":null,"code":"// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport axios from 'axios';\nimport Cors from 'cors'; // Initializing the cors middleware\n\nconst cors = Cors({\n  methods: ['GET', 'HEAD']\n}); // Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\n\nfunction runMiddleware(req, res, fn) {\n  return new Promise((resolve, reject) => {\n    fn(req, res, result => {\n      if (result instanceof Error) {\n        return reject(result);\n      }\n\n      return resolve(result);\n    });\n  });\n} // Run the middleware\n\n\nawait runMiddleware(req, res, cors); // Rest of the API logic\n\nconsole.log(\"here\");\nawait fetch(\"http://localhost:5000/calculate\").then(data => {\n  res.json(data);\n});\nexport default handler;","map":{"version":3,"sources":["/Users/jamespeccia/OneDrive/Projects/ncaab/ncaab-frontend/pages/api/hello.js"],"names":["axios","Cors","cors","methods","runMiddleware","req","res","fn","Promise","resolve","reject","result","Error","console","log","fetch","then","data","json","handler"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CAEA;;AACA,MAAMC,IAAI,GAAGD,IAAI,CAAC;AACjBE,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,MAAR;AADQ,CAAD,CAAjB,C,CAIA;AACA;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,EAAjC,EAAqC;AACpC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvCH,IAAAA,EAAE,CAACF,GAAD,EAAMC,GAAN,EAAYK,MAAD,IAAY;AACxB,UAAIA,MAAM,YAAYC,KAAtB,EAA6B;AAC5B,eAAOF,MAAM,CAACC,MAAD,CAAb;AACA;;AACD,aAAOF,OAAO,CAACE,MAAD,CAAd;AACA,KALC,CAAF;AAMA,GAPM,CAAP;AAQA,C,CAGA;;;AACA,MAAMP,aAAa,CAACC,GAAD,EAAMC,GAAN,EAAWJ,IAAX,CAAnB,C,CACC;;AACAW,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,MAAMC,KAAK,CAAC,iCAAD,CAAL,CAAyCC,IAAzC,CAA8CC,IAAI,IAAI;AAACX,EAAAA,GAAG,CAACY,IAAJ,CAASD,IAAT;AAC5D,CADK,CAAN;AAGF,eAAeE,OAAf","sourcesContent":["// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport axios from 'axios'\nimport Cors from 'cors';\n\n// Initializing the cors middleware\nconst cors = Cors({\n\tmethods: ['GET', 'HEAD']\n});\n\n// Helper method to wait for a middleware to execute before continuing\n// And to throw an error when an error happens in a middleware\nfunction runMiddleware(req, res, fn) {\n\treturn new Promise((resolve, reject) => {\n\t\tfn(req, res, (result) => {\n\t\t\tif (result instanceof Error) {\n\t\t\t\treturn reject(result);\n\t\t\t}\n\t\t\treturn resolve(result);\n\t\t});\n\t});\n}\n\n\n\t// Run the middleware\n\tawait runMiddleware(req, res, cors);\n  // Rest of the API logic\n  console.log(\"here\")\n  await fetch(\"http://localhost:5000/calculate\").then(data => {res.json(data)\n  })\n\nexport default handler;"]},"metadata":{},"sourceType":"module"}